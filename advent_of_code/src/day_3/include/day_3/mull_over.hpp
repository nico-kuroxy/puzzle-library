/**
 * @file mull_over.hpp
 * @author nicolas.erbetti.k@gmail.com
 * @brief This file defines the header of the Mull it Over problem proposed in Day 3 of the Advent of Code.
 * @copyright Â© 2025 Nicolas Erbetti
 */

#ifndef _DAY_3_MULL_OVER_HPP_
#define _DAY_3_MULL_OVER_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> DEPENDENCIES
//> C/C++ libraries
#include <string>
//> Custom-made libraries
#include <library/base_advent_day.hpp>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> GLOBAL VARIABLES
//> ATOMIC VARIABLES
//> OTHERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> CLASS DECLARATION
class MullOver : public BaseAdventDay {
/**
 * @class MullOver
 * @brief A class to process the Advent of Code Day 3 problem.
 *
 * Inherits from BaseAdventDay. This class handles memory input, parses multiplication instructions,
 * and computes results based on pattern-matching operations.
 */

 public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> CONSTRUCTORS
    /**
     * @brief Constructor of the class. Declared as explicit to prevent ambiguous instantiation.
     * @param _filename Path to the input file containing memory data.
     */
     explicit MullOver(std::string _filename);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> DESTRUCTORS
    /**
     * @brief Destructor of the class.
     */
     ~MullOver();
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> FUNCTIONS
    /**
     * @brief Run the code to process the input list.
     * @return 0 on success, non-zero on failure.
     */
    int run();
    /**
     * @brief Load data from a text file and fill the memory string.
     * @details Temporal complexity: O(n), Space complexity: O(n).
     * @param _fn Path to the input file.
     * @param _memory Output string containing raw memory data.
     * @return 0 on success, non-zero on error.
     */
    int loadDataFromFile(const std::string& _fn, std::string& _memory);
    /**
     * @brief Multiply the memory values between identified `mul(x, y)` markers.
     * @details
     *   - Temporal complexity: O(n)
     *   - Space complexity: O(1)
     * @param _memory Input string representing memory.
     * @param _result Output: product of matched memory values.
     * @param _result_instructions Output: product of instruction-flagged values.
     * @param _mul_enabled Output: whether multiplication mode is enabled.
     * @return 0 on success, non-zero on error.
     */
    int multiplyMemory(const std::string& _memory, int& _result, int& _result_instructions, bool& _mul_enabled);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> ACCESSORS
    //> GETTERS
    //> SETTERS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> GENERAL ATTRIBUTES
    //> DYNAMIC / They can change during runtime.
    /**
     * @brief Memory representation loaded from input.
     */
    std::string memory_;
    /**
     * @brief The result of the multiplication.
     */
    int result_;
    /**
     * @brief The result of the multiplication with the instructions considered.
     */
    int result_instructions_;
    /**
     * @brief Whether or not the multiplication logic is currently enabled.
     */
    bool mul_enabled_;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif  // _DAY_3_MULL_OVER_HPP_
