/**********************************************************************************************************************/
//   author: nicolas.erbetti.k@gmail.com
//   brief: This file defines the header of the Mull it Over problem proposed in the day 3 of the advent of code.
//   copyright: Â© 2025 Nicolas Erbetti.
/**********************************************************************************************************************/

#ifndef _DAY_3_MULL_OVER_HPP_
#define _DAY_3_MULL_OVER_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> DEPENDENCIES
//> C/C++ libraries
#include <string>
//> Custom-made libraries
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> GLOBAL VARIABLES
//> ATOMIC VARIABLES
//> OTHERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> CLASS DECLARATION
class MullOver {
/* A class to process the problem of day 2. */

 public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> CONSTRUCTORS
    /* Constructor of the class. Declared as explicit to prevent ambiguous instanciation. */
    explicit MullOver(std::string _filename);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> DESTRUCTORS
    /* Destructor of the class. */
    ~MullOver();
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> FUNCTIONS
    /* Run the code to process the input list. */
    int run();
    /* Load data from a text file and fill the vectors with the left and right ids.
       Temporal complexity: O(n).
       Space complexity: O(n). */
    int loadDataFromFile(const std::string& _fn, std::string& _memory);
    /* Multiply the memory values between identified "mul(x, y)".
       Temporal complexity: O(n).
       Space complexity: O(1). */
    int multiplyMemory(const std::string& _memory, int& _result, int& _result_instructions, bool& _mul_enabled);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> ACCESSORS
    //> GETTERS
    //> SETTERS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> GENERAL ATTRIBUTES
    //> DYNAMIC / They can change during runtime.
    // The name of the file containing the data to process.
    std::string filename_;
    // The report data, which is a map of integers (id of the report) to vectors of integers (levels of the report).
    std::string memory_;
    // The result of the multiplication.
    int result_;
    // The result of the multiplication with the instructions.
    int result_instructions_;
    // Whether or not the multiplication is enabled.
    bool mul_enabled_;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif  // _DAY_3_MULL_OVER_HPP_
