/**
 * @file print_queue.hpp
 * @author nicolas.erbetti.k@gmail.com
 * @brief This file defines the header of the Print Queue problem proposed in Day 5 of the Advent of Code.
 * @copyright Â© 2025 Nicolas Erbetti
 */

#ifndef _DAY_5_PRINT_QUEUE_HPP_
#define _DAY_5_PRINT_QUEUE_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> DEPENDENCIES
//> C/C++ libraries
#include <cstdint>
#include <string>
#include <vector>
//> Custom-made libraries
#include <library/base_advent_day.hpp>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> GLOBAL VARIABLES
//> ATOMIC VARIABLES
//> OTHERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> CLASS DECLARATION
class PrintQueue : public BaseAdventDay {
/**
 * @class PrintQueue
 * @brief A class to process the Advent of Code Day 4 problem.
 *
 * Inherits from BaseAdventDay. This class loads a character grid, computes hashes,
 * searches for words or patterns, and tracks occurrences using custom logic.
 */

 public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> CONSTRUCTORS
    /**
     * @brief Constructor of the class. Declared as explicit to prevent ambiguous instantiation.
     * @param _filename Path to the input file.
     */
    explicit PrintQueue(std::string _filename);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> DESTRUCTORS
    /**
     * @brief Destructor of the class.
     */
    ~PrintQueue();
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> FUNCTIONS
    /**
     * @brief Declare a run function to comply with the base class.
     * @return 0 on success, non-zero on failure.
     */
    int run();
    /**
     * @brief Load the data from the input file and extract the new pages to produce and the rules they need to follow.
     * @return 0 on success, non-zero on failure.
     */
    int loadDataFromFile(
      const std::string& _fn, std::vector<std::pair<int, int>>& _page_rules, std::vector<int> _new_pages);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> ACCESSORS
    //> GETTERS
    //> SETTERS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> GENERAL ATTRIBUTES
    //> DYNAMIC / They can change during runtime.
    /**
     * @brief The list of page rules that the newly produced pages must follow.
     */
    std::vector<std::pair<int, int>> page_rules_;
    /**
     * @brief The list of pages that we want to produce in the update.
     */
    std::vector<int> new_pages_;
    //> FIXED / They cannot change during runtime. Declared as const.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif  // _DAY_5_PRINT_QUEUE_HPP_
