/**********************************************************************************************************************/
//   author: nicolas.erbetti.k@gmail.com
//   brief: This file defines the header of the Historian Hysteria problem proposed in the day 1 of the advent of code.
//   copyright: Â© 2025 Nicolas Erbetti.
/**********************************************************************************************************************/

#ifndef _DAY_1_HISTORIAN_HYSTERIA_HPP_
#define _DAY_1_HISTORIAN_HYSTERIA_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> DEPENDENCIES
//> C/C++ libraries
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>
//> Custom-made libraries
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> GLOBAL VARIABLES
//> ATOMIC VARIABLES
//> OTHERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///> CLASS DECLARATION
class HistorianHysteria {
/* A class to process the problem of day1. */

 public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> CONSTRUCTORS
    /* Constructor of the class. Declared as explicit to prevent ambiguous instanciation. */
    explicit HistorianHysteria(std::string _filename);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> DESTRUCTORS
    /* Destructor of the class. */
    ~HistorianHysteria();
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> FUNCTIONS
    /* Run the code to process the input list. */
    int run();
    /* Load data from a text file and fill the vectors with the left and right ids.
       Temporal complexity: O(n).
       Space complexity: O(n). */
    int loadDataFromFile(const std::string& _fn, std::vector<int>& _data_l, std::vector<int>& _data_r);
    /* Compute the distance between the left and right ids.
       Temporal complexity: O(n log n ).
       Space complexity: O(1). */
    int computeDistance(std::vector<int>& _data_l, std::vector<int>& _data_r, int& _distance);
    /* Compute the similarity between the left and right ids.
       Temporal complexity: O(n).
       Space complexity: O(n). */
    int computeSimilarity(
      std::vector<int>& _data_l, std::vector<int>& _data_r,
         int& _similarity, std::unordered_map<int, std::pair<int, int>>& _similarity_map);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> ACCESSORS
    //> GETTERS
    //> SETTERS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///> GENERAL ATTRIBUTES
    //> DYNAMIC / They can change during runtime.
    // The name of the file containing the data to process.
    std::string filename_;
    // The vector containing the left ids.
    std::vector<int> data_l_;
    // The vector containing the right ids.
    std::vector<int> data_r_;
    // The computed distance between the left and right ids.
    int distance_;
    // The computed similarity between the left and right ids.
    int similarity_;
    // The map containing the number of each ids from the left list counted in the right list.
    std::unordered_map<int, std::pair<int, int>> similarity_map_;
    //> FIXED / They cannot change during runtime. Declared as const.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif  // _DAY_1_HISTORIAN_HYSTERIA_HPP_
